upstream backend {
    server backend:8000 max_fails=3 fail_timeout=30s;
    # Better handling of container IP changes
    keepalive 32;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

upstream frontend {
    server frontend:80;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=general:10m rate=50r/s;
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
limit_req_zone $binary_remote_addr zone=auth:10m rate=20r/m;

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name bsmarker.utia.cas.cz;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Main HTTPS server
server {
    listen 443 ssl;
    http2 on;
    server_name bsmarker.utia.cas.cz;

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/bsmarker.utia.cas.cz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/bsmarker.utia.cas.cz/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/bsmarker.utia.cas.cz/chain.pem;

    # SSL Security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' https: blob:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' https: data: blob:; media-src 'self' https: blob:; connect-src 'self' https: blob:;" always;

    # Logging
    access_log /var/log/nginx/bsmarker_access.log combined;
    error_log /var/log/nginx/bsmarker_error.log warn;

    # File upload size for audio files
    client_max_body_size 100M;
    client_body_buffer_size 10M;

    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    send_timeout 60s;

    # Special rate limit for auth endpoints (top-level)
    location /api/v1/auth/login {
        limit_req zone=auth burst=2 nodelay;
        proxy_pass http://backend;
        include /etc/nginx/proxy_params.conf;
    }

    # API endpoints with rate limiting
    location /api {
        # Apply rate limiting
        limit_req zone=api burst=20 nodelay;

        proxy_pass http://backend;
        include /etc/nginx/proxy_params.conf;

        # WebSocket support (for future features)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # MinIO endpoint (secured with authentication and IP restrictions)
    location /minio {
        # Restrict access to internal networks only
        allow 10.0.0.0/8;     # Allow internal Docker networks
        allow 172.16.0.0/12;  # Allow Docker bridge networks
        allow 192.168.0.0/16; # Allow private networks
        allow 127.0.0.1;      # Allow localhost
        deny all;             # Deny all other IPs

        # Require Authorization header with Bearer token
        if ($http_authorization !~ "^Bearer .+") {
            return 401 "Unauthorized: MinIO access requires valid authentication token";
        }

        # Apply rate limiting to prevent abuse
        limit_req zone=api burst=10 nodelay;

        rewrite ^/minio/(.*) /$1 break;
        proxy_pass http://minio:9000;
        include /etc/nginx/proxy_params.conf;

        # MinIO specific headers
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Disable buffering for MinIO
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Static assets with cache control
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://frontend;
        include /etc/nginx/proxy_params.conf;

        # Cache static assets but ensure revalidation
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
        add_header Pragma "public";
    }

    # Frontend - must be last
    location / {
        limit_req zone=general burst=20 nodelay;
        proxy_pass http://frontend;
        include /etc/nginx/proxy_params.conf;

        # Don't cache HTML to ensure latest version
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}
