services:
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: bsmarker
      POSTGRES_PASSWORD: bsmarker_local  # pragma: allowlist secret
      POSTGRES_DB: bsmarker_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [CMD-SHELL, pg_isready -U bsmarker]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    healthcheck:
      test: [CMD, redis-cli, ping]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123  # pragma: allowlist secret
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - 9001:9001  # MinIO Console for debugging
    healthcheck:
      test: [CMD, curl, -f, http://localhost:9000/minio/health/live]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://bsmarker:bsmarker_local@postgres:5432/bsmarker_db  # pragma: allowlist secret
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123  # pragma: allowlist secret
      MINIO_BUCKET_NAME: bsmarker
      SECRET_KEY: ${SECRET_KEY:-change-this-secret-key-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-change-this-jwt-secret-in-production}
      FIRST_ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@localhost}
      FIRST_ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}  # pragma: allowlist secret
      CORS_ORIGINS: '["http://localhost"]'
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    command: gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://bsmarker:bsmarker_local@postgres:5432/bsmarker_db  # pragma: allowlist secret
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123  # pragma: allowlist secret
      MINIO_BUCKET_NAME: bsmarker
      SECRET_KEY: ${SECRET_KEY:-change-this-secret-key-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-change-this-jwt-secret-in-production}
      FIRST_ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@localhost}
      FIRST_ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}  # pragma: allowlist secret
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=2

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://bsmarker:bsmarker_local@postgres:5432/bsmarker_db  # pragma: allowlist secret
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123  # pragma: allowlist secret
      MINIO_BUCKET_NAME: bsmarker
      SECRET_KEY: ${SECRET_KEY:-change-this-secret-key-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-change-this-jwt-secret-in-production}
      FIRST_ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@localhost}
      FIRST_ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}  # pragma: allowlist secret
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A app.core.celery_app beat --loglevel=info

  nginx:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.local.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:
