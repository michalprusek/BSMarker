version: '3.8'

# Development configuration - DO NOT use in production!
# This configuration includes hot-reloading and debug features

services:
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: bsmarker
      POSTGRES_PASSWORD: bsmarker_dev
      POSTGRES_DB: bsmarker_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # Exposed for debugging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bsmarker"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"  # Exposed for debugging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://bsmarker:bsmarker_dev@postgres:5432/bsmarker_db
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: bsmarker
      SECRET_KEY: dev-secret-key
      JWT_SECRET_KEY: dev-jwt-secret
      FIRST_ADMIN_EMAIL: admin@localhost
      FIRST_ADMIN_PASSWORD: admin123
      CORS_ORIGINS: '["http://localhost:3000", "http://127.0.0.1:3000"]'
      LOG_LEVEL: DEBUG
    volumes:
      - ./backend:/app  # Hot reload
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://bsmarker:bsmarker_dev@postgres:5432/bsmarker_db
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: bsmarker
      LOG_LEVEL: DEBUG
    volumes:
      - ./backend:/app  # Hot reload
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: celery -A app.core.celery_app worker --loglevel=debug

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://bsmarker:bsmarker_dev@postgres:5432/bsmarker_db
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: DEBUG
    volumes:
      - ./backend:/app  # Hot reload
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery_app beat --loglevel=debug

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    environment:
      REACT_APP_API_URL: http://localhost:8000/api/v1
      REACT_APP_MINIO_URL: http://localhost:9000
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent overwriting node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: npm start

volumes:
  postgres_data:
  minio_data:
