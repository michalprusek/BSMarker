#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# BSMarker Pre-push Hook
# Runs comprehensive checks before pushing to remote repository

echo "üöÄ BSMarker Pre-push Hook - Running final checks before push..."
echo "=================================================="

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Track overall status
OVERALL_STATUS=0

# Get the branch being pushed
BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo -e "${CYAN}Pushing to branch: ${BRANCH}${NC}\n"

# Function to run checks
run_check() {
    local name="$1"
    local command="$2"
    echo -e "${BLUE}‚ñ∂ Running: ${name}${NC}"

    if eval "$command"; then
        echo -e "${GREEN}‚úì ${name} passed${NC}\n"
        return 0
    else
        echo -e "${RED}‚úó ${name} failed${NC}\n"
        return 1
    fi
}

# 1. Check for WIP commits
echo -e "${YELLOW}üìã Checking for WIP commits...${NC}"
WIP_COMMITS=$(git log origin/${BRANCH}..HEAD --oneline | grep -iE "WIP|work in progress|DO NOT MERGE|TEMP|TODO" || true)
if [ -n "$WIP_COMMITS" ]; then
    echo -e "${YELLOW}‚ö† Found WIP commits:${NC}"
    echo "$WIP_COMMITS"
    echo -e "${YELLOW}Are you sure you want to push WIP commits? (y/n)${NC}"
    read -r response
    if [ "$response" != "y" ]; then
        echo -e "${RED}Push cancelled${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}‚úì No WIP commits found${NC}\n"
fi

# 2. Check for large files
echo -e "${YELLOW}üìè Checking for large files...${NC}"
LARGE_FILES=$(git diff --stat --cached origin/${BRANCH} | grep -E "([0-9]+) files? changed" | awk '{
    for(i=1;i<=NF;i++) {
        if($i ~ /[0-9]+\+/) {
            gsub(/\+/, "", $i)
            if($i > 10000) print "Large change detected: " $i " lines"
        }
    }
}')

if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}‚ö† Large changes detected:${NC}"
    echo "$LARGE_FILES"
    echo ""
fi

# Check for binary files
BINARY_FILES=$(git diff --numstat origin/${BRANCH}..HEAD | grep "^-" | cut -f3)
if [ -n "$BINARY_FILES" ]; then
    echo -e "${YELLOW}‚ö† Binary files detected:${NC}"
    echo "$BINARY_FILES"
    echo -e "${YELLOW}Make sure binary files are necessary${NC}\n"
fi

# 3. Run security scan
echo -e "${YELLOW}üîí Running security scan...${NC}"

# Check for sensitive data patterns
SENSITIVE_PATTERNS=(
    "password.*=.*['\"].*['\"]"
    "api[_-]?key.*=.*['\"].*['\"]"
    "secret.*=.*['\"].*['\"]"
    "token.*=.*['\"].*['\"]"
    "AKIA[0-9A-Z]{16}"
    "-----BEGIN (RSA |OPENSSH |DSA |EC )?PRIVATE KEY-----"
    "Bearer [a-zA-Z0-9_\-\.=]+"
)

for pattern in "${SENSITIVE_PATTERNS[@]}"; do
    MATCHES=$(git diff origin/${BRANCH}..HEAD | grep -E "$pattern" 2>/dev/null | grep -v "example" | grep -v "test" || true)
    if [ -n "$MATCHES" ]; then
        echo -e "${RED}‚úó Potential sensitive data detected for pattern: $pattern${NC}"
        echo "$MATCHES"
        OVERALL_STATUS=1
    fi
done

if [ $OVERALL_STATUS -eq 0 ]; then
    echo -e "${GREEN}‚úì Security scan passed${NC}\n"
fi

# 4. Run tests (if enabled)
if [ "$RUN_TESTS_ON_PUSH" = "true" ] || [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ] || [ "$BRANCH" = "dev" ]; then
    echo -e "${YELLOW}üß™ Running tests...${NC}\n"

    # Backend tests
    if [ -d "backend" ]; then
        run_check "Backend unit tests" \
            "cd backend && python -m pytest tests/ -v --tb=short" || OVERALL_STATUS=1

        run_check "Backend test coverage" \
            "cd backend && python -m pytest --cov=app --cov-report=term-missing --cov-fail-under=70 tests/" || OVERALL_STATUS=1
    fi

    # Frontend tests
    if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
        run_check "Frontend tests" \
            "cd frontend && npm test -- --watchAll=false --passWithNoTests" || OVERALL_STATUS=1
    fi
fi

# 5. Check Docker builds (if Dockerfiles changed)
DOCKER_CHANGED=$(git diff --name-only origin/${BRANCH}..HEAD | grep -E "Dockerfile|docker-compose" || true)
if [ -n "$DOCKER_CHANGED" ]; then
    echo -e "${YELLOW}üê≥ Docker files changed - Validating builds...${NC}\n"

    # Validate docker-compose files
    for compose_file in $(echo "$DOCKER_CHANGED" | grep "docker-compose"); do
        if [ -f "$compose_file" ]; then
            run_check "Docker Compose validation: $compose_file" \
                "docker-compose -f $compose_file config --quiet" || OVERALL_STATUS=1
        fi
    done

    # Optionally build Docker images (can be slow)
    if [ "$BUILD_DOCKER_ON_PUSH" = "true" ]; then
        run_check "Docker build" \
            "docker-compose build --parallel" || OVERALL_STATUS=1
    fi
fi

# 6. Check for dependency vulnerabilities
echo -e "${YELLOW}üì¶ Checking dependencies for vulnerabilities...${NC}\n"

# Python dependencies
if [ -f "backend/requirements.txt" ]; then
    if command -v safety >/dev/null 2>&1; then
        run_check "Python dependency scan" \
            "safety check -r backend/requirements.txt --json" || echo -e "${YELLOW}‚ö† Some vulnerabilities found - review before deployment${NC}"
    fi
fi

# Node dependencies
if [ -f "frontend/package.json" ]; then
    run_check "Node dependency audit" \
        "cd frontend && npm audit --audit-level=high" || echo -e "${YELLOW}‚ö† Some vulnerabilities found - run 'npm audit fix'${NC}"
fi

# 7. Lint commit messages
echo -e "${YELLOW}üìù Validating commit messages...${NC}"
COMMITS=$(git log origin/${BRANCH}..HEAD --pretty=format:"%h %s")
INVALID_COMMITS=""

while IFS= read -r commit; do
    HASH=$(echo "$commit" | awk '{print $1}')
    MSG=$(echo "$commit" | cut -d' ' -f2-)

    # Check conventional commit format
    if ! echo "$MSG" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|security|deps|config|db|api|ui)(\([a-z]+\))?: .+"; then
        INVALID_COMMITS="${INVALID_COMMITS}${HASH}: ${MSG}\n"
    fi
done <<< "$COMMITS"

if [ -n "$INVALID_COMMITS" ]; then
    echo -e "${YELLOW}‚ö† Found non-conventional commits:${NC}"
    echo -e "$INVALID_COMMITS"
    echo -e "${YELLOW}Consider using conventional commit format${NC}\n"
else
    echo -e "${GREEN}‚úì All commits follow conventional format${NC}\n"
fi

# 8. Check branch protection rules
if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ]; then
    echo -e "${RED}‚ö† Direct push to ${BRANCH} branch detected!${NC}"
    echo -e "${YELLOW}Consider creating a pull request instead${NC}"
    echo -e "${YELLOW}Continue with direct push? (y/n)${NC}"
    read -r response
    if [ "$response" != "y" ]; then
        echo -e "${RED}Push cancelled${NC}"
        exit 1
    fi
fi

# 9. Final code quality check
echo -e "${YELLOW}üéØ Running final code quality checks...${NC}\n"

# Check code complexity
if command -v radon >/dev/null 2>&1 && [ -d "backend" ]; then
    echo -e "${BLUE}‚ñ∂ Checking Python code complexity...${NC}"
    COMPLEX_FILES=$(cd backend && radon cc app/ -s -n C 2>/dev/null | grep -E "^\s+[MF]" || true)
    if [ -n "$COMPLEX_FILES" ]; then
        echo -e "${YELLOW}‚ö† High complexity detected in:${NC}"
        echo "$COMPLEX_FILES"
        echo ""
    else
        echo -e "${GREEN}‚úì Code complexity is acceptable${NC}\n"
    fi
fi

# Check for debugging code
echo -e "${BLUE}‚ñ∂ Checking for debugging code...${NC}"
DEBUG_CODE=$(git diff origin/${BRANCH}..HEAD | grep -E "debugger|console\.(log|debug|trace)|print\(|breakpoint\(\)" | grep -v "^-" || true)
if [ -n "$DEBUG_CODE" ]; then
    echo -e "${YELLOW}‚ö† Debugging code detected:${NC}"
    echo "$DEBUG_CODE" | head -10
    echo ""
fi

# 10. Performance check (optional)
if [ "$RUN_PERF_CHECK" = "true" ]; then
    echo -e "${YELLOW}‚ö° Running performance checks...${NC}\n"

    # Check bundle size for frontend
    if [ -d "frontend" ]; then
        run_check "Frontend bundle analysis" \
            "cd frontend && npm run build && npm run analyze" || echo -e "${YELLOW}‚ö† Check bundle size${NC}"
    fi
fi

# Summary
echo "=================================================="
if [ $OVERALL_STATUS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ All pre-push checks passed!${NC}"
    echo -e "${GREEN}Code is ready to be pushed to ${BRANCH}${NC}"

    # Show summary of what will be pushed
    echo ""
    echo -e "${CYAN}Summary of changes:${NC}"
    git diff --stat origin/${BRANCH}..HEAD
    echo ""
    echo -e "${CYAN}Commits to be pushed:${NC}"
    git log origin/${BRANCH}..HEAD --oneline
else
    echo -e "${RED}‚ùå Pre-push checks failed!${NC}"
    echo -e "${RED}Please fix the issues above before pushing${NC}"
    echo ""
    echo -e "${YELLOW}To bypass (not recommended): git push --no-verify${NC}"
    exit 1
fi

exit 0
