version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/backup:/backup
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BROWSER_REDIRECT_URL: https://bsmarker.utia.cas.cz/minio-console
    volumes:
      - minio_data:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    image: bsmarker/backend:${VERSION:-latest}
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      CORS_ORIGINS: '["https://bsmarker.utia.cas.cz"]'
      LIBROSA_CACHE_DIR: /tmp/librosa_cache
      MPLCONFIGDIR: /tmp/matplotlib_cache
      NUMBA_CACHE_DIR: /tmp
    # volumes:
    #   - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - internal
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    image: bsmarker/backend:${VERSION:-latest}
    restart: unless-stopped
    command: ["celery", "-A", "app.core.celery_app", "worker", "--loglevel=info", "--queues=spectrogram,default", "--concurrency=2"]
    env_file:
      - .env.production
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      NUMBA_CACHE_DIR: /tmp
      LIBROSA_CACHE_DIR: /tmp/librosa_cache
      MPLCONFIGDIR: /tmp/matplotlib_cache
    # volumes:
    #   - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - internal
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    image: bsmarker/backend:${VERSION:-latest}
    restart: unless-stopped
    command: ["celery", "-A", "app.core.celery_app", "beat", "--loglevel=info", "--schedule=/tmp/celerybeat-schedule"]
    env_file:
      - .env.production
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - celery-beat-schedule:/tmp
    # volumes:
    #   - ./backend/logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - internal
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/tmp/celerybeat-schedule') else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        REACT_APP_API_URL: https://bsmarker.utia.cas.cz
    image: bsmarker/frontend:${VERSION:-latest}
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: bsmarker/nginx:${VERSION:-latest}
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:rw
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - internal
      - external
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Backup service (runs periodically)
  backup:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./scripts/backup:/backup
      - postgres_backup:/var/backups
    networks:
      - internal
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        while true; do
          echo "Starting backup at $$(date)"
          pg_dump -h postgres -U ${DB_USER} -d ${DB_NAME} > /var/backups/bsmarker_$$(date +%Y%m%d_%H%M%S).sql
          # Keep only last 7 days of backups
          find /var/backups -name "bsmarker_*.sql" -mtime +7 -delete
          echo "Backup completed at $$(date)"
          sleep 86400  # Run daily
        done
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

volumes:
  postgres_data:
    driver: local
  postgres_backup:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  nginx_logs:
    driver: local
  celery-beat-schedule:
    driver: local

networks:
  internal:
    driver: bridge
    internal: true
  external:
    driver: bridge
